---
title: "From RNA to Protein: a Bayesian model of the Central Dogma"
bibliography: bibliography.bib
reference-location: margin
format:
  html:
    standalone: true
    toc: true
    code-fold: true
  docx: default
---

Development of a Bayesian inference model to go from mRNA transcripts to proteins.

## Model definition

Since the data extracted from @balakrishnanPrinciplesGeneRegulation2022 are quasi-compositions (there are still 0 values in some of the transcriptomics samples), we would
like to use a model suitable for compositional data (vectors in the simplex), described in @eq-diri-model,

$$
\begin{align}
R &\sim D(1) \\
\delta &\sim lN(1, 1) \\
P &\sim D(R \delta n) \\
\alpha_r, \alpha_p &\sim InvGamma(0.5,1)\\
\psi_m &\sim D(\alpha_r n)\\
\psi_p &\sim D(\alpha_p n) \\
\end{align}
$$ {#eq-diri-model}

where $R$ and $P$ are matrix of the true distributions of number fractions of
mRNA and proteins, respectively; $D$ is the row-wise Dirichlet distribution;
$lN$ is the log-Normal distribution;  $\delta$ is a vector of translation rates
(one per transcript); $\alpha$ are dispersion parameters for the measurement
models; and $\psi_m$ and $\psi_p$ are the observed number fractions of mRNA and
proteins, respectively.

The priors for $\delta$ was chosen to roughly mathc Figure 1D of @balakrishnanPrinciplesGeneRegulation2022.

n is the scaling factor.

The measurement model are two Dirichlet distributions drawn from the true
compositions $R$ and $P$. The $\alpha$ parameters are there to account for
uncertainty/dispersion of the compositions in the measurement model; while
compositional data is invariant to multiplication by positive-constants, the
prior of the Dirichlet encodes both the fractions and the dispersion of each
component. Hence, the magnitude $\alpha$ of the closure is relevant and it is
fitted during inference.

This model needs a careful treatment of the conditions and replicates: we would
like for $R$ and $P$ to be matrices containing a row for each condition. Thus,
they need to be sampled accordingly to generate the "runs" or biological replicates in $\psi$. 
A more challenging issue about the conditions is explained in the next section.

## Data preprocessing

The conditions covered in the transcriptomics and proteomics data sets do not overlap completely. The transcriptomics data set covers 15 conditions and 28 samples, while the proteomics data set covers 16 conditions and 29 samples. The overlap between the two data sets covers only 12 conditions and 16 samples.

An overview of the conditions covered in the data sets:

| ID    | Original sample ID transcriptomics | Original sample ID proteomics | Group        | Growth rate transcriptomics | Growth rate proteomics | Strain  | Supplement           | Description                                  |
|-------|------------------------------------|-------------------------------|--------------|-----------------------------|------------------------|---------|----------------------|----------------------------------------------|
| C0_r1 | c5                                 | C2                            | C-limitation | 0.91                        | 0.91                   | NCM3722 |                      | NCM3722 (wild type) in M9 medium             |
| C0_r2 | c0_1                               |                               | C-limitation | 0.95                        |                        | NCM3722 |                      | NCM3722 (wild type) in M9 medium             |
| C1_r1 |                                    | C3                            | C-limitation |                             | 0.77                   | NQ1243  | 400 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C1_r2 |                                    | F4                            | C-limitation |                             | 0.81                   | NQ1243  | 400 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C2_r1 | c1                                 |                               | C-limitation | 0.75                        |                        | NQ1243  | 300 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C2_r2 | c1_1                               |                               | C-limitation | 0.78                        |                        | NQ1243  | 300 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C3_r1 |                                    | C4                            | C-limitation |                             | 0.69                   | NQ1243  | 100 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C3_r2 |                                    | C8                            | C-limitation |                             | 0.72                   | NQ1243  | 100 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C3_r3 |                                    | F5                            | C-limitation |                             | 0.71                   | NQ1243  | 100 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C4_r1 | c2                                 | C5                            | C-limitation | 0.56                        | 0.56                   | NQ1243  |                      | Titratable glucose uptake (Pu-ptsG)          |
| C4_r2 | c2_1                               | D6                            | C-limitation | 0.59                        | 0.56                   | NQ1243  |                      | Titratable glucose uptake (Pu-ptsG)          |
| C4_r3 |                                    | F6                            | C-limitation |                             | 0.55                   | NQ1243  |                      | Titratable glucose uptake (Pu-ptsG)          |
| C5_r1 | c3                                 | C6                            | C-limitation | 0.51                        | 0.48                   | NQ1390  | 400 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C5_r2 | c3_1                               | D8                            | C-limitation | 0.46                        | 0.49                   | NQ1390  | 400 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C5_r3 |                                    | F7                            | C-limitation |                             | 0.5                    | NQ1390  | 400 µM 3MBA          | Titratable glucose uptake (Pu-ptsG)          |
| C6_r1 | c4                                 | C7                            | C-limitation | 0.3                         | 0.35                   | NQ1390  | 40 µM 3MBA           | Titratable glucose uptake (Pu-ptsG)          |
| C6_r2 | c4_1                               | D7                            | C-limitation | 0.39                        | 0.33                   | NQ1390  | 40 µM 3MBA           | Titratable glucose uptake (Pu-ptsG)          |
| C6_r3 |                                    | F8                            | C-limitation |                             | 0.34                   | NQ1390  | 40 µM 3MBA           | Titratable glucose uptake (Pu-ptsG)          |
| A1_r1 |                                    | D5                            | A-limitation |                             | 0.91                   | NQ393   | 100 µM IPTG          | Titratable ammonia assimilation (Plac-GOGAT) |
| A1_r2 |                                    | F2                            | A-limitation |                             | 0.89                   | NQ393   | 100 µM IPTG          | Titratable ammonia assimilation (Plac-GOGAT) |
| A1_r3 |                                    | F3                            | A-limitation |                             | 0.84                   | NQ393   | 100 µM IPTG          | Titratable ammonia assimilation (Plac-GOGAT) |
| A2_r1 | a1                                 |                               | A-limitation | 0.69                        |                        | NQ393   | 60 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A2_r2 | a1_1                               |                               | A-limitation | 0.76                        |                        | NQ393   | 60 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A3_r1 |                                    | D4                            | A-limitation |                             | 0.67                   | NQ393   | 50 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A4_r1 | a2                                 | D3                            | A-limitation | 0.51                        | 0.54                   | NQ393   | 40 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A4_r2 | a2_1                               |                               | A-limitation | 0.55                        |                        | NQ393   | 40 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A5_r1 | a3                                 | D2                            | A-limitation | 0.33                        | 0.36                   | NQ393   | 30 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A5_r2 |                                    |                               | A-limitation |                             |                        | NQ393   | 30 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A6_r1 | a4                                 | D1                            | A-limitation | 0.24                        | 0.22                   | NQ393   | 20 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| A6_r2 | a4_1                               |                               | A-limitation | 0.34                        |                        | NQ393   | 20 µM IPTG           | Titratable ammonia assimilation (Plac-GOGAT) |
| R0_r1 | r0                                 | A2                            | R_limitation | 0.89                        | 0.98                   | NCM3722 |                      | NCM3722 (wild type) in MOPS medium           |
| R0_r2 | r0_1                               | H1                            | R_limitation | 0.91                        | 0.98                   | NCM3722 |                      | NCM3722 (wild type) in MOPS medium           |
| R0_r3 |                                    | H5                            | R_limitation |                             | 0.97                   | NCM3722 |                      | NCM3722 (wild type) in MOPS medium           |
| R1_r1 | r1                                 | E1                            | R_limitation | 0.71                        | 0.79                   | NCM3722 | 2 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R1_r2 | r1_1                               |                               | R_limitation | 0.61                        |                        | NCM3722 | 2 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R2_r1 | r2                                 | E2                            | R_limitation | 0.53                        | 0.61                   | NCM3722 | 4 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R2_r2 | r2_1                               |                               | R_limitation | 0.44                        |                        | NCM3722 | 4 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R3_r1 | r3                                 | E3                            | R_limitation | 0.45                        | 0.49                   | NCM3722 | 6 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R3_r2 | r3_1                               |                               | R_limitation | 0.35                        |                        | NCM3722 | 6 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R4_r1 | r4                                 | E4                            | R_limitation | 0.4                         | 0.36                   | NCM3722 | 8 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R4_r2 | r4_1                               |                               | R_limitation | 0.28                        |                        | NCM3722 | 8 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |
| R5_r1 | r5                                 |                               | R_limitation | 0.38                        |                        | NCM3722 | 9 µM chloramphenicol | NCM3722 (wild type) in MOPS medium           |


### How do we treat missing data?

The compositions must be greater than 0, but there are those in proteomics.

* Remove genes that are never not-zero in any condition (transcript or protein).
* If a gene is 0 we can either resolve by indexing in the measurement or add a pseudocount. Either way, we have to close to 1 to make it be a good output of the Dirichilet distribution.

### Data generation of true

We simulate data generation process of true data.

```{python}
import pandas as pd

df = pd.read_csv("data/transcriptomics_fractions.csv")
df_meta = pd.read_csv("data/dataset_description.csv" )
# work only with the ones that coincide for now
df_meta_both = df_meta.loc[df_meta.iloc[:, 1].notnull() & df_meta.iloc[:, 2].notnull()]
df_meta_both.iloc[:, :3].head()
```

Filter transcriptcs/proteins that are not in any condition.

```{python}
df_prot = pd.read_csv("data/proteomics_fractions.csv")
effective_prot = (df_prot.iloc[:, 3:]!=0).any(axis=1)
# just in case, although everything will be true
effective_mrna = (df.iloc[:, 3:]!=0).any(axis=1)
df_mrna_filter = df[effective_prot & effective_mrna]
df_prot_filter = df_prot[effective_prot & effective_mrna]
N_mrna = N_prot = df_prot_filter.shape[0]
N_cond = df_meta_both.shape[0]
```

```{python}
from plotnine import *

# plot x axis protein i and y axis mRNA i
df_plot = pd.DataFrame({"prot": df_prot_filter.iloc[:, 4], "mrna": df_mrna_filter.iloc[:, 4], "gene": df_prot_filter.gene.to_list()})
plot = (
  ggplot(df_plot, aes(x="prot", y="mrna")) + geom_point(alpha=0.5)
  + scale_x_log10()
  + scale_y_log10()
)
plot.show()
```

From Note S1 in @moriCoarseFineAbsolute2021, the number of proteins per $\mu m^3$ is $3 \cdot 10^6$.

For the number of RNA molecules, we use a ballpark of 2400 molecules per cell volume.

```{python}
import numpy as np

rng = np.random.default_rng(42)
# generate R from dirichlet 
R = rng.dirichlet([1]*N_mrna, N_cond)
delta = 2 ** rng.normal(0, 1.2, N_mrna)
n = 1e6
print(np.percentile(delta, [0, 25, 50, 75, 100]))
# we multiply by number of molecules per cell-volume to get number of molecules mRNA_i
P = np.stack(
  [rng.dirichlet(R[cond, :] * delta * n)
  for cond in range(R.shape[0])
  ]
)
assert P.shape == R.shape
```
```{python}
# plot delta vector as hist
df_delta = pd.DataFrame({"delta": delta})
plot = (
  ggplot(df_delta, aes(x="delta")) + geom_histogram() + scale_x_log10()
)
plot.show()
```


For the measurement model:

```{python}
alpha_mrna = 1 / rng.gamma(0.5, 1);
alpha_prot = 1 / rng.gamma(0.5, 1);
phi_mrna_sim = np.stack(
  [rng.dirichlet(R[cond, :] * alpha_mrna * n)
  for cond in range(N_cond)
  ]
)
phi_prot_sim = np.stack(
  [rng.dirichlet(P[cond, :] * alpha_prot * n)
  for cond in range(N_cond)
  ]
)
```

Let's plot the things.

```{python}
from plotnine import *

df_plot = pd.DataFrame({"prot": phi_prot_sim.flatten(), "mrna": phi_mrna_sim.flatten(), "gene": df_prot_filter.gene.to_list() * N_cond, "condition": df_meta_both.iloc[:, 1].to_list() * N_mrna})
df_plot = df_plot[(df_plot.mrna > 1e-8) & (df_plot.prot > 1e-8)] 

plot = (
    ggplot(df_plot[df_plot.condition == df_plot.condition[0]], aes(x="prot", y="mrna"))
    + geom_point(alpha=0.5)
    # + ylab("$\phi$")
    # rotate the x-axis labels
    + theme(axis_text_x=element_text(angle=90))
    # + facet_wrap("~condition")
    # log scale for y
    + scale_y_log10()
    + scale_x_log10()
    # both axes bound to 1e-7 to 1e-1
    # + coord_cartesian(xlim=[1e-7, 1e-1], ylim=[1e-7, 1e-1])
)
plot.show()
```

Same plot for the true latent variables.

```{python}
df_plot = pd.DataFrame({"prot": P.flatten(), "mrna": R.flatten(), "gene": df_prot_filter.gene.to_list() * N_cond, "condition": df_meta_both.iloc[:, 1].to_list() * N_mrna})
plot = (
  ggplot(df_plot[df_plot.condition == df_plot.condition[0]], aes(x="prot", y="mrna")) + geom_point(alpha=0.5)
  + scale_y_log10()
  + scale_x_log10()
  + xlab("P")
  + ylab("R")
)
plot.show()
```
  
